$include_const "iglobals.pasm";
using extern "io_ops";

function main[main](argv) {
  var parrot_gmp = {
    "name"              : 'Parrot-GMP',
    "abstract"          : 'Parrot bindings for the GNU Multi-Precision Library',
    "description"       : 'Parrot bindings for the GNU Multi-Precision Library.  Currently has bindings for Integer type functions and random initialization functions.',
    "authority"         : 'http://github.com/bubaflub',
    "copyright_holder"  : 'Bob Kuo',
    "keywords"          : ["parrot", "gmp"],
    "license_type"      : 'Artistic License 2.0',
    "license_uri"       : 'http://www.perlfoundation.org/artistic_license_2_0',
    "checkout_uri"      : 'git://github.com/bubaflub/parrot-gmp.git',
    "browser_uri"       : 'git://github.com/bubaflub/parrot-gmp',
    "project_uri"       : 'git://github.com/bubaflub/parrot-gmp',
    "pir_winxed"        : {},
    "pbc_pir"           : {},
    "inst_lib"          : [],
    "installable_pbc"   : {},
    "include_winxed"    : {},
    "manifest_includes" : ["README.md", "setup.winxed"]
  };

  if (argv[1] == "test")
    do_test();

  setup_stable_libraries(parrot_gmp);

  load_bytecode('distutils.pir');
  using setup;
  using register_step_before;

  register_step_before("build", check_dependencies);
  register_step_before("clean", clean_build_dir);

  argv.shift();
  setup(argv, parrot_gmp);
}

function setup_stable_libraries(var parrot_gmp) {
  var libs = [
    'raw',
    'Common',
    'Random',
    'Integer'
  ];

  string prefix = "src/GMP/";

  for (string source in libs) {
    string winxed_file = prefix + source + ".winxed";
    string pir_file    = prefix + source + ".pir";
    string pbc_file    = "GMP/" + source + ".pbc";
    parrot_gmp["pir_winxed"][pir_file] = winxed_file;
    parrot_gmp["pbc_pir"][pbc_file]    = pir_file;
    parrot_gmp["inst_lib"].push(pbc_file);
  }
}

function do_test() {
  int result;
  string cmd = "parrot-nqp t/harness";
  ${ spawnw result, cmd };
  ${ exit result };
}

function check_dependencies() {
  var config = getinterp()[IGLOBALS_CONFIG_HASH];
  // Check if Parrot is > 3.2.0
  int maj = config['MAJOR'];
  int min = config['MINOR'];
  if (maj < 3 || (maj == 3 && min < 2)) {
    die("You need at least Parrot 3.2.0 to use Parrot-GMP");
  }
  // Check if Parrot has been built/configured with libffi
  int has_libffi = config['has_libffi'];
  if (!has_libffi) {
    die("You need to have Parrot configured with libffi to use Parrot-GMP");
  }
  // Check if Parrot has been built/configured with gmp
  int has_gmp = config['HAS_GMP'];
  if (!has_gmp) {
    die("You need to have Parrot configured with GMP to use Parrot-GMP");
  }
  // Check GMP version > 4.3
  // Also grab other system dependent information
  string file = "build/gmp_test.c";
  string exe  = "build/gmp_test" + string(config['exe']);
  string command = string(config['cc']) + " " + string(config['ccflags']) + " " + string(config['cc_exe_out']) + exe + " " + file;
  system(command);
  var pipe = new "FileHandle";
  pipe.encoding('utf8');
  pipe.open(exe, "rp");
  string output = pipe.readall();
  pipe.close();
  int exit_status = pipe.exit_status();
  if (exit_status != 0) {
    die("Could not run " + exe + ": please check that your system has libgmp");
  }
  var lines = split("\n", output);
  var values = split(' ', lines[0]);
  int gmp_major = values[0];
  int gmp_minor = values[1];
  int gmp_patch = values[2];
  if (gmp_major < 4 || (gmp_major == 4 && gmp_minor < 2)) {
    die("Need GMP version >= 4.2");
  }
  // TODO: process other values from build/gmp_test
}

function clean_build_dir() {
  var config = getinterp()[IGLOBALS_CONFIG_HASH];
  string exe = "build/gmp_test" + string(config['exe']);
  int e = 0;
  ${ stat e, exe, 0 };
  if (e) {
    say("unlink " + exe);
    unlink(exe);
  }
}
