$include_const 'datatypes.pasm';

function load[anon,load]() {
  load_bytecode('def.pbc');
}

function gmpz_t[anon, immediate]() {
  var gmpz_t = new 'StructView'([ DATATYPE_STRUCT, 3, DATATYPE_INT, DATATYPE_PTR, DATATYPE_INT ]);
  return gmpz_t;
}

function stoa[anon](string s) {
  var str_to_cstring = dlfunc(null, 'Parrot_str_to_cstring', 'ppS');
  return str_to_cstring(getinterp(), s);
}

function atos[anon](var a) {
  var cstring_to_str = dlfunc(null, 'Parrot_str_new', 'Sppi');
  return cstring_to_str(getinterp(), a, 0);
}

namespace GMP {
  class Integer {
    var ptr;

    function Integer(var init[optional], int has_init[opt_flag]) {
      using gmpz_t;
      var ptr = self.ptr = gmpz_t.alloc();

      if (has_init) {
        if (init instanceof 'String') {
          using gmp.__gmpz_init;
          using mpz_set_str;
          # ideally use __gmpz_init_set_str
          __gmpz_init(ptr);
          mpz_set_str(self, string(init), 10);
          self.ptr = ptr;
        }
        else if (init instanceof 'Integer') {
          using gmp.__gmpz_init;
          using mpz_set_str;
          # ideally use __gmpz_init_set_str
          __gmpz_init(ptr);
          mpz_set_str(self, string(init), 10);
          self.ptr = ptr;
        }
        else {
          throw Error("incorrect type init for Integer constructor");
        }
      } else {
        using gmp.__gmpz_init;
        __gmpz_init(ptr);
        self.ptr = ptr;
      }
    }

    function destroy[vtable('destroy')]() {
      if(self.ptr != null) {
        var ptr  = self.ptr;
        self.ptr = null;
        using gmp.__gmpz_clear;
        __gmpz_clear(ptr);
      }
    }
  }
}

