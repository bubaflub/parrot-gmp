$include_const 'datatypes.pasm';

function load[anon,load]() {
  load_bytecode('def.pbc');
}

function gmpz_t[anon, immediate]() {
  var gmpz_t = new 'StructView'([ DATATYPE_STRUCT, 3, DATATYPE_INT, DATATYPE_PTR, DATATYPE_INT ]);
  return gmpz_t;
}

namespace GMP {
  class Integer {
    var ptr;

    function Integer() {
      using static gmpz_t;
      var ptr = self.ptr = gmpz_t.alloc();
      using gmp.__gmpz_init;
      __gmpz_init(ptr);
    }

  }
}

function mpz_set_ui(var rop, int op) {
  if(!(rop instanceof GMP.Integer))
    die("incorrect type");
  using gmp.__gmpz_set_ui;
  __gmpz_set_ui(rop, op);
}

function mpz_get_ui(var op) {
  if(!(op instanceof GMP.Integer))
    die("incorrect type");
  using gmp.__gmpz_get_ui;
  return __gmpz_get_ui(op);
}

function mpz_add_ui(var rop, var op1, int op2) {
  if(!(rop instanceof GMP.Integer))
    die("incorrect type");
  if(!(op1 instanceof GMP.Integer))
    die("incorrect type");
  using gmp.__gmpz_add_ui;
  __gmpz_add_ui(rop, op1, op2);
}
