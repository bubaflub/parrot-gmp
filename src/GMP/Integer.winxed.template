$include_const 'datatypes.pasm';

function load[anon,load]() {
  load_bytecode('GMP/raw.pbc');
  load_bytecode('GMP/Common.pbc');
}

namespace GMP {
  class Integer {
    var ptr;

    function Integer(var init[optional], int has_init[opt_flag]) {
      using GMP.Common.gmpz_t;
      var t = gmpz_t();
      var ptr = self.ptr = t.alloc();

      if (has_init) {
        if (init instanceof 'String') {
          using GMP.Raw.__gmpz_init;
          using mpz_set_str;
          # ideally use __gmpz_init_set_str
          __gmpz_init(ptr);
          mpz_set_str(self, string(init), 10);
          self.ptr = ptr;
        }
        else if (init instanceof 'Integer') {
          using GMP.Raw.__gmpz_init;
          using mpz_set_str;
          # ideally use __gmpz_init_set_str
          __gmpz_init(ptr);
          mpz_set_str(self, string(init), 10);
          self.ptr = ptr;
        }
        else {
          throw Error("incorrect type init for Integer constructor");
        }
      } else {
        using GMP.Raw.__gmpz_init;
        __gmpz_init(ptr);
        self.ptr = ptr;
      }
    }

    function destroy[vtable('destroy')]() {
      if(self.ptr != null) {
        var ptr  = self.ptr;
        self.ptr = null;
        using GMP.Raw.__gmpz_clear;
        __gmpz_clear(ptr);
      }
    }

    function get_string[vtable]() {
      return mpz_get_str("", 10, self);
    }

    function get_integer[vtable]() {
      return mpz_get_si(self);
    }

  }
}

/*
=head1 int mpz_sgn (mpz_t op)

Return +1 if op > 0, 0 if op = 0, and -1 if op < 0. This function is actually implemented as a macro. It evaluates its argument multiple times. 

=cut
*/

function mpz_sgn (var op) {
  if(!(op instanceof GMP.Integer))
    throw Error("incorrect type for op in mpz_sgn");
  int i = mpz_cmp_ui(op, 0);
  if (i > 0)
    return 1;
  if (i < 0)
    return -1;
  return 0;
}

/*
=head1 int mpz_odd_p (mpz_t op)

=head1 int mpz_even_p (mpz_t op)

Determine whether op is odd or even, respectively. Return non-zero if yes, zero if no. These macros evaluate their argument more than once. 

=cut
*/

function mpz_odd_p (var op) {
  if(!(op instanceof GMP.Integer))
    throw Error("incorrect type for op in mpz_odd_p");
  return mpz_tstbit(op, 0);
}

function mpz_even_p (var op) {
  if(!(op instanceof GMP.Integer))
    throw Error("incorrect type for op in mpz_even_p");
  return !mpz_tstbit(op, 0);
}

